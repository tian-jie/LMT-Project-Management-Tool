@{ Layout = "_AdminLayout"; }

<div class="md:flex flex-col md:flex-row md:min-h-screen w-full max-w-screen-xl mx-auto">
    <!-- * * * * * * * * * * * * * -->
    <!-- Start of GoJS sample code -->

    <script src="https://unpkg.com/gojs@2.1.40/release/go-debug.js"></script>
    <div class="p-4 w-full">

        <script id="code">
            //var treeModel = {
            //    "class": "go.TreeModel",
            //    "nodeDataArray": [
            //        { "key": "fdkafjkdasjfdsk", "name": "Luke Warm", "title": "VP Marketing/Sales", "parent": 1},
            //        { "key": 3, "name": "Meg Meehan Hoffa", "title": "Sales", "parent": "fdkafjkdsjfdsk" },
            //        { "key": 4, "name": "Peggy Flaming", "title": "VP Engineering", "parent": 1 },
            //        { "key": 5, "name": "Saul Wellingood", "title": "Manufacturing", "parent": 4 },
            //        { "key": 6, "name": "Al Ligori", "title": "Marketing", "parent": "fdkafjkdasjfdsk" },
            //        { "key": 7, "name": "Dot Stubadd", "title": "Sales Rep", "parent": 3 },
            //        { "key": 8, "name": "Les Ismore", "title": "Project Mgr", "parent": 5 },
            //        { "key": 9, "name": "April Lynn Parris", "title": "Events Mgr", "parent": 6 },
            //        { "key": 10, "name": "Xavier Breath", "title": "Engineering", "parent": 4 },
            //        { "key": 11, "name": "Anita Hammer", "title": "Process", "parent": 5 },
            //        { "key": 12, "name": "Billy Aiken", "title": "Software", "parent": 10 },
            //        { "key": 13, "name": "Stan Wellback", "title": "Testing", "parent": 10 },
            //        { "key": 14, "name": "Marge Innovera", "title": "Hardware", "parent": 10 },
            //        { "key": 15, "name": "Evan Elpus", "title": "Quality", "parent": 5 },
            //        { "key": 16, "name": "Lotta B. Essen", "title": "Sales Rep", "parent": 3 },
            //        { "key": 1, "name": "Stella Payne Diaz", "title": "CEO", "parent": ""}
            //    ]
            //};
            function init() {
                $.post("/api/v1/user-api/get-org-chart",
                    function (data) {
                        //alert("Data Loaded: " + data);
                        var treeModel = data;
                        treeModel.nodeDataArray.forEach(a => function () { if (a.parent == null) delete a.parent; });
                        initGo(treeModel);
                    });

                //initGo(treeModel);
            }

            function initGo(treeModel) {
                var $ = go.GraphObject.make;  // for conciseness in defining templates

                myDiagram =
                    $(go.Diagram, "myDiagramDiv", // must be the ID or reference to div
                        {
                            maxSelectionCount: 1, // users can select only one part at a time
                            validCycle: go.Diagram.CycleDestinationTree, // make sure users can only create trees

                            layout:
                                $(go.TreeLayout,
                                    {
                                        treeStyle: go.TreeLayout.StyleLastParents,
                                        arrangement: go.TreeLayout.ArrangementHorizontal,
                                        // properties for most of the tree:
                                        angle: 90,
                                        layerSpacing: 35,
                                        // properties for the "last parents":
                                        alternateAngle: 90,
                                        alternateLayerSpacing: 35,
                                        alternateAlignment: go.TreeLayout.AlignmentBus,
                                        alternateNodeSpacing: 20
                                    }),
                            "undoManager.isEnabled": true // enable undo & redo
                        });


                var levelColors = ["#AC193D", "#2672EC", "#8C0095", "#5133AB",
                    "#008299", "#D24726", "#008A00", "#094AB2"];

                // override TreeLayout.commitNodes to also modify the background brush based on the tree depth level
                myDiagram.layout.commitNodes = function () {
                    go.TreeLayout.prototype.commitNodes.call(myDiagram.layout);  // do the standard behavior
                    // then go through all of the vertexes and set their corresponding node's Shape.fill
                    // to a brush dependent on the TreeVertex.level value
                    myDiagram.layout.network.vertexes.each(function (v) {
                        if (v.node) {
                            var level = v.level % (levelColors.length);
                            var color = levelColors[level];
                            var shape = v.node.findObject("SHAPE");
                            if (shape) shape.stroke = $(go.Brush, "Linear", { 0: color, 1: go.Brush.lightenBy(color, 0.05), start: go.Spot.Left, end: go.Spot.Right });
                        }
                    });
                };

                // this is used to determine feedback during drags
                function mayWorkFor(node1, node2) {
                    if (!(node1 instanceof go.Node)) return false;  // must be a Node
                    if (node1 === node2) return false;  // cannot work for yourself
                    if (node2.isInTreeOf(node1)) return false;  // cannot work for someone who works for you
                    return true;
                }

                // This function provides a common style for most of the TextBlocks.
                // Some of these values may be overridden in a particular TextBlock.
                function textStyle() {
                    return { font: "9pt  Segoe UI,sans-serif", stroke: "white" };
                }

                // This converter is used by the Picture.
                function findHeadShot(picture) {
                    // if (key < 0 || key > 16) return "images/HSnopic.jpg"; // There are only 16 images on the server
                    // return "images/HS" + key + ".jpg"
                    return picture;
                }

                // define the Node template
                myDiagram.nodeTemplate =
                    $(go.Node, "Auto",

                        { // handle dragging a Node onto a Node to (maybe) change the reporting relationship
                            mouseDragEnter: function (e, node, prev) {
                                var diagram = node.diagram;
                                var selnode = diagram.selection.first();
                                if (!mayWorkFor(selnode, node)) return;
                                var shape = node.findObject("SHAPE");
                                if (shape) {
                                    shape._prevFill = shape.fill;  // remember the original brush
                                    shape.fill = "darkred";
                                }
                            },
                            mouseDragLeave: function (e, node, next) {
                                var shape = node.findObject("SHAPE");
                                if (shape && shape._prevFill) {
                                    shape.fill = shape._prevFill;  // restore the original brush
                                }
                            },
                            mouseDrop: function (e, node) {
                                var diagram = node.diagram;
                                var selnode = diagram.selection.first();  // assume just one Node in selection
                                if (mayWorkFor(selnode, node)) {
                                    // find any existing link into the selected node
                                    var link = selnode.findTreeParentLink();
                                    if (link !== null) {  // reconnect any existing link
                                        link.fromNode = node;
                                    } else {  // else create a new link
                                        diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);
                                    }
                                }
                            }
                        },
                        // for sorting, have the Node.text be the data.name
                        new go.Binding("text", "name"),
                        // bind the Part.layerName to control the Node's layer depending on whether it isSelected
                        new go.Binding("layerName", "isSelected", function (sel) { return sel ? "Foreground" : ""; }).ofObject(),
                        // define the node's outer shape
                        $(go.Shape, "Rectangle",
                            {
                                name: "SHAPE", fill: "#333333", stroke: 'white', strokeWidth: 3.5,
                                // set the port properties:
                                portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer"
                            }),
                        $(go.Panel, "Horizontal",
                            $(go.Picture,
                                {
                                    name: "Picture",
                                    desiredSize: new go.Size(70, 70),
                                    margin: 1.5,
                                },
                                new go.Binding("source", "picture")),
                            // define the panel where the text will appear
                            $(go.Panel, "Table",
                                {
                                    minSize: new go.Size(130, NaN),
                                    maxSize: new go.Size(150, NaN),
                                    margin: new go.Margin(6, 10, 0, 6),
                                    defaultAlignment: go.Spot.Left
                                },
                                $(go.RowColumnDefinition, { column: 2, width: 4 }),
                                $(go.TextBlock, textStyle(),  // the name
                                    {
                                        row: 0, column: 0, columnSpan: 5,
                                        font: "14pt Segoe UI,sans-serif",
                                        //editable: true, isMultiline: false,
                                        minSize: new go.Size(10, 16)
                                    },
                                    new go.Binding("text", "name").makeTwoWay()),
                                $(go.TextBlock, "Title: ", textStyle(),
                                    { row: 1, column: 0 }),
                                $(go.TextBlock, textStyle(),
                                    {
                                        row: 1, column: 1, columnSpan: 4,
                                        //editable: true, isMultiline: false,
                                        minSize: new go.Size(10, 14),
                                        margin: new go.Margin(0, 0, 0, 3)
                                    },
                                    new go.Binding("text", "title").makeTwoWay()),
                                //$(go.TextBlock, textStyle(),
                                //    { row: 2, column: 1, columnSpan: 4 },
                                //    new go.Binding("text", "key", function (v) { return "ID: " + v; })),
                                //$(go.TextBlock, textStyle(),
                                //    { name: "boss", row: 3, column: 0, columnSpan: 5}, // we include a name so we can access this TextBlock when deleting Nodes/Links
                                //    new go.Binding("text", "parent", function (v) { return "Boss: " + v; })),
                                $(go.TextBlock, textStyle(),  // the comments
                                    {
                                        row: 3, column: 0, columnSpan: 5,
                                        font: "italic 9pt sans-serif",
                                        wrap: go.TextBlock.WrapFit,
                                        //editable: true,  // by default newlines are allowed
                                        minSize: new go.Size(10, 14)
                                    },
                                    new go.Binding("text", "comments").makeTwoWay())
                            )  // end Table Panel
                        ) // end Horizontal Panel
                    );  // end Node

                // define the Link template
                myDiagram.linkTemplate =
                    $(go.Link, go.Link.Orthogonal,
                        { corner: 5, relinkableFrom: true, relinkableTo: true },
                        $(go.Shape, { strokeWidth: 1.5, stroke: "#F5F5F5" }));  // the link shape

                // read in the JSON-format data from the "mySavedModel" element
                load(treeModel);


                // support editing the properties of the selected person in HTML
                if (window.Inspector) myInspector = new Inspector("myInspector", myDiagram,
                    {
                        properties: {
                            "key": { readOnly: true },
                            "comments": {}
                        }
                    });

                // Setup zoom to fit button
                document.getElementById('zoomToFit').addEventListener('click', function () {
                    myDiagram.commandHandler.zoomToFit();
                });

                document.getElementById('centerRoot').addEventListener('click', function () {
                    myDiagram.scale = 1;
                    myDiagram.commandHandler.scrollToPart(myDiagram.findNodeForKey(1));
                });

            } // end init

            function load(treeModel) {
                myDiagram.model = go.Model.fromJson(treeModel);
                // make sure new data keys are unique positive integers
                var lastkey = 1;
                myDiagram.model.makeUniqueKeyFunction = function (model, data) {
                    var k = data.key || lastkey;
                    while (model.findNodeDataForKey(k)) k++;
                    data.key = lastkey = k;
                    return k;
                };
            }
            window.addEventListener('DOMContentLoaded', init);
        </script>

        <div id="sample">
            <div id="myDiagramDiv"
                 style="background-color: rgb(52, 52, 60); border: 1px solid black; height: 570px; position: relative; -webkit-tap-highlight-color: rgba(255, 255, 255, 0); cursor: auto;">
                <canvas tabindex="0" width="1317" height="688"
                        style="position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; width: 1054px; height: 551px; cursor: auto;">
                    This
                    text is displayed if your browser does not support the Canvas HTML element.
                </canvas>
                <div style="position: absolute; overflow: auto; width: 1054px; height: 568px; z-index: 1;">
                    <div style="position: absolute; width: 1687.5px; height: 1px;"></div>
                </div>
            </div>
            <p><button id="zoomToFit">Zoom to Fit</button> <button id="centerRoot">Center on root</button></p>


        </div>
    </div>
    <!-- * * * * * * * * * * * * * -->
    <!--  End of GoJS sample code  -->
</div>