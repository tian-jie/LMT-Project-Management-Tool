@{Layout = "_AdminLayout";}

<div class="row">

    <div class="col-xs-12">

        <form class="form-inline" id="SearchForm" method="post">
            <div class="form-group">
                <div class="form-group">

                    <select id="Group" class="select2_single form-control" name="GroupId" data-placeholder="Please Select Group">
                        <option value="" selected="selected">Please Choose Group</option>
                        @foreach (var item in ViewBag.Groups)
                        {
                            <option value="@item.Gid">@item.Name</option>
                        }
                    </select>

                    <select id="Year" class="select2_single form-control" name="Year" data-placeholder="Please Select Year">
                    </select>
                    <select id="Week" class="select2_single form-control" name="Week" data-placeholder="Please Select Week">
                    </select>

                </div>

                @*<a href="javascript:void(0);" class="btn btn-sm" id="clear_condition" data-toggle="tooltip" data-placement="top" title="清除条件">
                        <i class="fa fa-remove"></i>
                    </a>*@
                <a href="javascript:initTable();" class="btn  btn-sm" id="btnSearch1" data-toggle="tooltip" data-placement="top" title="按条件搜索">
                    <i class="fa fa-search"></i>
                </a>
            </div>
            <div class="form-group pull-right" style="margin-left:5px">
                @*<a href="/plugins/innocellence.wx.tools/content/PollingAcountingTemplate.xlsx" id="downloadTemplateBtn" class="btn btn-success btn-sm" data-toggle="tooltip" data-placement="top" title="下载得分统计模板">
                        <i class="fa fa-file-excel-o"></i>
                    </a>*@
                @*<a href="Create?appid=@ViewBag.AppId" id="addBtn" class="btn btn-success btn-sm" data-toggle="tooltip" data-placement="top" title="添加">
                        <i class="fa fa-plus"></i>
                    </a>*@
            </div>
        </form>

        <div class="widget-box">
            <div class="widget-content nopadding">
                <table class="table table-bordered data-table" id="table">
                    <thead>
                        <tr>
                            <th style="width: 6%; text-align: center;">Id</th>
                            <th style="width: 8%; text-align: center;">Employee Id</th>
                            <th style="width: 30%">Employee</th>
                            <th style="width: 10%">MON</th>
                            <th style="width: 10%">TUE</th>
                            <th style="width: 10%">WED</th>
                            <th style="width: 10%">THU</th>
                            <th style="width: 10%">FRI</th>
                            <th style="width: 10%">SAT</th>
                            <th style="width: 10%">SUN</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>

    </div>

</div>

@section Scripts {

    <script type="text/javascript">
        var yearNode = document.getElementById("Year");
        var weekNode = document.getElementById("Week");
        var yearList = [];

        $(document).ready(function () {
            var yearWeekCalendar = initYearWeekSelect();
            console.log(yearWeekCalendar);

            // 初始化年
            yearList.forEach((item) => {
                yearNode.options.add(new Option(item + '', item));
            });

            yearNode.addEventListener('change', function () {
                //另城市列表变为初始状态，可以注释掉查看效果
                weekNode.options.length = 0;
                var year = yearNode.options[yearNode.selectedIndex].text;
                var weeksByYear = yearWeekCalendar[year];
                weeksByYear.forEach((item) => {
                    var displayText = item.Year + ' - ' + item.Week + ': (' + item.StartDate.slice(0, 10) + ' - ' + item.EndDate.slice(0, 10) + ')';
                    weekNode.options.add(new Option(displayText, item.Week + ''));
                });

            });
        });

        function initYearWeekSelect() {
            var yearWeekCalendar = [];
            var yearWeekCalendarOriginal = JSON.parse(HtmlUtil.htmlDecode('@Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.YearWeekCalendar)'));
            console.log(yearWeekCalendarOriginal);

            var lastYear = 0
            yearWeekCalendarOriginal.forEach((item) => {
                var year = item.Year;
                if (year != lastYear) {
                    yearWeekCalendar[year + ''] = [];
                    console.log('new year added ' + year);
                    yearList.push(year);
                    lastYear = year;
                }

                yearWeekCalendar[year + ''].push(item);
            });

            return yearWeekCalendar;
        }

        function initTable() {

            $('#table').bootstrapTable('destroy');

            $('#table').bootstrapTable({
                url: '/api/v1/timesheet-api/get-timesheet-thisweek-by-group',
                method: "get",
                contentType: "application/json",
                queryParams: {
                    groupId: $('#Group').val(),
                    year: $('#Year').val(),
                    week: $('#Week').val()
                },
                toolbar: "#toolbar",
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                pagination: true,                   //是否显示分页（*）
                sortable: true,                     //是否启用排序
                sortOrder: "asc",                   //排序方式
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pageNumber: 1,                      //初始化加载第一页，默认第一页,并记录
                pageSize: 50,                       //每页的记录行数（*）
                pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
                search: false,                      //是否显示表格搜索
                strictSearch: true,
                showColumns: true,                  //是否显示所有的列（选择显示的列）
                showRefresh: true,                  //是否显示刷新按钮
                minimumCountColumns: 2,             //最少允许的列数
                clickToSelect: true,                //是否启用点击选中行
                //height: 500,                      //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "userId",                     //每一行的唯一标识，一般为主键列
                showToggle: false,                   //是否显示详细视图和列表视图的切换按钮
                cardView: false,                    //是否显示详细视图
                detailView: true,                  //是否显示父子表
                showFooter: true,
                "columns": [{
                    field: 'userId',
                }, {
                    field: 'employeeName',
                }, {
                    field: 'mondayTotalHours',
                    align: 'center',
                    valign: 'middle',
                    footerFormatter: function (value) { //底部合计
                        var count = 0;
                        for (var i in value) {
                            count += value[i].MondayTotalHours;
                        }
                        return count;
                    }
                }, {
                    field: 'tuesdayTotalHours',
                    align: 'center',
                    valign: 'middle',
                    footerFormatter: function (value) { //底部合计
                        var count = 0;
                        for (var i in value) {
                            count += value[i].TuesdayTotalHours;
                        }
                        return count;
                    }
                }, {
                    field: 'wednesdayTotalHours',
                    align: 'center',
                    valign: 'middle',
                    footerFormatter: function (value) { //底部合计
                        var count = 0;
                        for (var i in value) {
                            count += value[i].WednesdayTotalHours;
                        }
                        return count;
                    }
                }, {
                    field: 'thursdayTotalHours',
                    align: 'center',
                    valign: 'middle',
                    footerFormatter: function (value) { //底部合计
                        var count = 0;
                        for (var i in value) {
                            count += value[i].ThursdayTotalHours;
                        }
                        return count;
                    }
                }, {
                    field: 'fridayTotalHours',
                    align: 'center',
                    valign: 'middle',
                    footerFormatter: function (value) { //底部合计
                        var count = 0;
                        for (var i in value) {
                            count += value[i].FridayTotalHours;
                        }
                        return count;
                    }
                }, {
                    field: 'saturdayTotalHours',
                    align: 'center',
                    valign: 'middle',
                    footerFormatter: function (value) { //底部合计
                        var count = 0;
                        for (var i in value) {
                            count += value[i].SaturdayTotalHours;
                        }
                        return count;
                    }
                }, {
                    field: 'sundayTotalHours',
                    align: 'center',
                    valign: 'middle',
                    footerFormatter: function (value) { //底部合计
                        var count = 0;
                        for (var i in value) {
                            count += value[i].SundayTotalHours;
                        }
                        return count;
                    }
                }
                ],
                //注册加载子表的事件。注意下这里的三个参数！
                onExpandRow: function (index, row, $detail) {
                    console.log('onExpandRow');
                    initSubTable(index, row, $detail);
                }
            });
        }

        //初始化子表格(无限循环)
        initSubTable = function (index, row, $detail) {
            var parentid = row.MENU_ID;
            var cur_table = $detail.html('<table></table>').find('table');
            $(cur_table).bootstrapTable({
                url: '/api/v1/timesheet-api/get-timesheet-thisweek-by-employee',
                method: 'get',
                queryParams: {
                    employeeId: row.UserId,
                    year: $('#Year').val(),
                    week: $('#Week').val()
                },
                clickToSelect: true,
                detailView: false, //父子表
                pageSize: 100,
                //pageList: [10, 25],
                "columns": [{
                    field: 'ProjectName',
                }, {
                    field: 'TaskName',
                }, {
                    field: 'MondayTotalHours',
                }, {
                    field: 'TuesdayTotalHours',
                }, {
                    field: 'WednesdayTotalHours',
                }, {
                    field: 'ThursdayTotalHours',
                }, {
                    field: 'FridayTotalHours',
                }, {
                    field: 'SaturdayTotalHours',
                }, {
                    field: 'SundayTotalHours',
                }
                ]
            });
        };


        var HtmlUtil = {
            /*1.用浏览器内部转换器实现html转码*/
            htmlEncode: function (html) {
                //1.首先动态创建一个容器标签元素，如DIV
                var temp = document.createElement("div");
                //2.然后将要转换的字符串设置为这个元素的innerText(ie支持)或者textContent(火狐，google支持)
                (temp.textContent != undefined) ? (temp.textContent = html) : (temp.innerText = html);
                //3.最后返回这个元素的innerHTML，即得到经过HTML编码转换的字符串了
                var output = temp.innerHTML;
                temp = null;
                return output;
            },
            /*2.用浏览器内部转换器实现html解码*/
            htmlDecode: function (text) {
                //1.首先动态创建一个容器标签元素，如DIV
                var temp = document.createElement("div");
                //2.然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)
                temp.innerHTML = text;
                //3.最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，即得到经过HTML解码的字符串了。
                var output = temp.innerText || temp.textContent;
                temp = null;
                return output;
            }
        };

    </script>
}